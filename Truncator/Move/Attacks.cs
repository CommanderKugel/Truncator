using System.Diagnostics;
using System.Runtime.InteropServices;

public static class Attacks
{
    /// <summary>
    /// Contains King Attacks by square on an empty Board
    /// </summary>
    private static ReadOnlySpan<ulong> KingAttacks_ => [
        0x0000000000000302ul, 0x0000000000000705ul, 0x0000000000000E0Aul, 0x0000000000001C14ul, 0x0000000000003828ul, 0x0000000000007050ul, 0x000000000000E0A0ul, 0x000000000000C040ul,
        0x0000000000030203ul, 0x0000000000070507ul, 0x00000000000E0A0Eul, 0x00000000001C141Cul, 0x0000000000382838ul, 0x0000000000705070ul, 0x0000000000E0A0E0ul, 0x0000000000C040C0ul,
        0x0000000003020300ul, 0x0000000007050700ul, 0x000000000E0A0E00ul, 0x000000001C141C00ul, 0x0000000038283800ul, 0x0000000070507000ul, 0x00000000E0A0E000ul, 0x00000000C040C000ul,
        0x0000000302030000ul, 0x0000000705070000ul, 0x0000000E0A0E0000ul, 0x0000001C141C0000ul, 0x0000003828380000ul, 0x0000007050700000ul, 0x000000E0A0E00000ul, 0x000000C040C00000ul,
        0x0000030203000000ul, 0x0000070507000000ul, 0x00000E0A0E000000ul, 0x00001C141C000000ul, 0x0000382838000000ul, 0x0000705070000000ul, 0x0000E0A0E0000000ul, 0x0000C040C0000000ul,
        0x0003020300000000ul, 0x0007050700000000ul, 0x000E0A0E00000000ul, 0x001C141C00000000ul, 0x0038283800000000ul, 0x0070507000000000ul, 0x00E0A0E000000000ul, 0x00C040C000000000ul,
        0x0302030000000000ul, 0x0705070000000000ul, 0x0E0A0E0000000000ul, 0x1C141C0000000000ul, 0x3828380000000000ul, 0x7050700000000000ul, 0xE0A0E00000000000ul, 0xC040C00000000000ul,
        0x0203000000000000ul, 0x0507000000000000ul, 0x0A0E000000000000ul, 0x141C000000000000ul, 0x2838000000000000ul, 0x5070000000000000ul, 0xA0E0000000000000ul, 0x40C0000000000000ul,
    ];

    /// <summary>
    /// Contains Knigt Attacks by square on an empty Board
    /// </summary>
    private static ReadOnlySpan<ulong> KnightAttacks_ => [
        0x0000000000020400ul, 0x0000000000050800ul, 0x00000000000A1100ul, 0x0000000000142200ul, 0x0000000000284400ul, 0x0000000000508800ul, 0x0000000000A01000ul, 0x0000000000402000ul,
        0x0000000002040004ul, 0x0000000005080008ul, 0x000000000A110011ul, 0x0000000014220022ul, 0x0000000028440044ul, 0x0000000050880088ul, 0x00000000A0100010ul, 0x0000000040200020ul,
        0x0000000204000402ul, 0x0000000508000805ul, 0x0000000A1100110Aul, 0x0000001422002214ul, 0x0000002844004428ul, 0x0000005088008850ul, 0x000000A0100010A0ul, 0x0000004020002040ul,
        0x0000020400040200ul, 0x0000050800080500ul, 0x00000A1100110A00ul, 0x0000142200221400ul, 0x0000284400442800ul, 0x0000508800885000ul, 0x0000A0100010A000ul, 0x0000402000204000ul,
        0x0002040004020000ul, 0x0005080008050000ul, 0x000A1100110A0000ul, 0x0014220022140000ul, 0x0028440044280000ul, 0x0050880088500000ul, 0x00A0100010A00000ul, 0x0040200020400000ul,
        0x0204000402000000ul, 0x0508000805000000ul, 0x0A1100110A000000ul, 0x1422002214000000ul, 0x2844004428000000ul, 0x5088008850000000ul, 0xA0100010A0000000ul, 0x4020002040000000ul,
        0x0400040200000000ul, 0x0800080500000000ul, 0x1100110A00000000ul, 0x2200221400000000ul, 0x4400442800000000ul, 0x8800885000000000ul, 0x100010A000000000ul, 0x2000204000000000ul,
        0x0004020000000000ul, 0x0008050000000000ul, 0x00110A0000000000ul, 0x0022140000000000ul, 0x0044280000000000ul, 0x0088500000000000ul, 0x0010A00000000000ul, 0x0020400000000000ul,
    ];

    /// <summary>
    /// Contains Pawn Attacks by square on an empty Board
    /// </summary>
    private static ReadOnlySpan<ulong> PawnAttacks_ => [
        // WHITE
        0x0000000000000200ul, 0x0000000000000500ul, 0x0000000000000A00ul, 0x0000000000001400ul, 0x0000000000002800ul, 0x0000000000005000ul, 0x000000000000A000ul, 0x0000000000004000ul, 
        0x0000000000020000ul, 0x0000000000050000ul, 0x00000000000A0000ul, 0x0000000000140000ul, 0x0000000000280000ul, 0x0000000000500000ul, 0x0000000000A00000ul, 0x0000000000400000ul, 
        0x0000000002000000ul, 0x0000000005000000ul, 0x000000000A000000ul, 0x0000000014000000ul, 0x0000000028000000ul, 0x0000000050000000ul, 0x00000000A0000000ul, 0x0000000040000000ul, 
        0x0000000200000000ul, 0x0000000500000000ul, 0x0000000A00000000ul, 0x0000001400000000ul, 0x0000002800000000ul, 0x0000005000000000ul, 0x000000A000000000ul, 0x0000004000000000ul, 
        0x0000020000000000ul, 0x0000050000000000ul, 0x00000A0000000000ul, 0x0000140000000000ul, 0x0000280000000000ul, 0x0000500000000000ul, 0x0000A00000000000ul, 0x0000400000000000ul, 
        0x0002000000000000ul, 0x0005000000000000ul, 0x000A000000000000ul, 0x0014000000000000ul, 0x0028000000000000ul, 0x0050000000000000ul, 0x00A0000000000000ul, 0x0040000000000000ul, 
        0x0200000000000000ul, 0x0500000000000000ul, 0x0A00000000000000ul, 0x1400000000000000ul, 0x2800000000000000ul, 0x5000000000000000ul, 0xA000000000000000ul, 0x4000000000000000ul, 
        0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 
        // BLACK
        0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 
        0x0000000000000002ul, 0x0000000000000005ul, 0x000000000000000Aul, 0x0000000000000014ul, 0x0000000000000028ul, 0x0000000000000050ul, 0x00000000000000A0ul, 0x0000000000000040ul, 
        0x0000000000000200ul, 0x0000000000000500ul, 0x0000000000000A00ul, 0x0000000000001400ul, 0x0000000000002800ul, 0x0000000000005000ul, 0x000000000000A000ul, 0x0000000000004000ul, 
        0x0000000000020000ul, 0x0000000000050000ul, 0x00000000000A0000ul, 0x0000000000140000ul, 0x0000000000280000ul, 0x0000000000500000ul, 0x0000000000A00000ul, 0x0000000000400000ul, 
        0x0000000002000000ul, 0x0000000005000000ul, 0x000000000A000000ul, 0x0000000014000000ul, 0x0000000028000000ul, 0x0000000050000000ul, 0x00000000A0000000ul, 0x0000000040000000ul, 
        0x0000000200000000ul, 0x0000000500000000ul, 0x0000000A00000000ul, 0x0000001400000000ul, 0x0000002800000000ul, 0x0000005000000000ul, 0x000000A000000000ul, 0x0000004000000000ul, 
        0x0000020000000000ul, 0x0000050000000000ul, 0x00000A0000000000ul, 0x0000140000000000ul, 0x0000280000000000ul, 0x0000500000000000ul, 0x0000A00000000000ul, 0x0000400000000000ul, 
        0x0002000000000000ul, 0x0005000000000000ul, 0x000A000000000000ul, 0x0014000000000000ul, 0x0028000000000000ul, 0x0050000000000000ul, 0x00A0000000000000ul, 0x0040000000000000ul,
    ];

    /// <summary>
    /// Returns the Attack Bitboard for a single Piece
    /// For Pawns, use PawnAttacks
    /// </summary>
    public static ulong PieceAttacks(PieceType pt, int sq, ulong block)
    {
        Debug.Assert(pt != PieceType.Pawn && pt != PieceType.NONE, "Unsupported PieceType in PieceAttacks!");
        Debug.Assert(sq >= 0 && sq < 64);
        return pt switch {
            PieceType.Knight => KnightAttacks_[sq],
            PieceType.Bishop => BishopAttacks(sq, block),
            PieceType.Rook   => RookAttacks(sq, block),
            PieceType.Queen  => BishopAttacks(sq, block) | RookAttacks(sq, block),
            PieceType.King   => KingAttacks_[sq],
            _                => 0,
        };
    }

    public static unsafe ulong BishopAttacks(int sq, ulong block)
    {
        return BishopMagic_[sq].GetAttack(block);
    }

    public static unsafe ulong RookAttacks(int sq, ulong block)
    {
        return RookMagic_[sq].GetAttack(block);
    }

    /// <summary>
    /// Returns the Attack Bitboard for a single Pawn
    /// </summary>
    public static ulong PawnAttacks(Color c, int sq)
    {
        Debug.Assert(c != Color.NONE);
        Debug.Assert(sq >= 0 && sq < 64);
        return PawnAttacks_[sq + (int)c * 64];
    }

    public static ulong RightPawnMassAttacks(Color c, ulong pawns)
    {
        Debug.Assert(c != Color.NONE);
        return (c == Color.White ? (pawns << 9) : (pawns >> 7)) & 0xfefefefefefefefe;
    }

    public static ulong LeftPawnMassAttacks(Color c, ulong pawns)
    {
        Debug.Assert(c != Color.NONE);
        return (c == Color.White ? (pawns << 7) : (pawns >> 9)) & 0x7f7f7f7f7f7f7f7f;
    }


    // MAGIC/PEXT SLIDER GENERATION HAPPENING PAST HERE //

    /// <summary>
    /// Returns the corresponding Rook Attack Bitboard
    /// </summary>
    public static ulong ratt(int sq, ulong block) {
        ulong result = 0UL;
        int rk = sq/8, fl = sq%8, r, f;
        for(r = rk+1; r <= 7; r++) {
            result |= (1UL << (fl + r*8));
            if((block & (1UL << (fl + r*8))) != 0) break;
        }
        for(r = rk-1; r >= 0; r--) {
            result |= (1UL << (fl + r*8));
            if((block & (1UL << (fl + r*8))) != 0) break;
        }
        for(f = fl+1; f <= 7; f++) {
            result |= (1UL << (f + rk*8));
            if((block & (1UL << (f + rk*8))) != 0) break;
        }
        for(f = fl-1; f >= 0; f--) {
            result |= (1UL << (f + rk*8));
            if((block & (1UL << (f + rk*8))) != 0) break;
        }
        return result;
    }

    /// <summary>
    /// Returns the corresponding Bishop Attack Bitboard
    /// </summary>
    public static ulong batt(int sq, ulong block) {
        ulong result = 0UL;
        int rk = sq/8, fl = sq%8, r, f;
        for(r = rk+1, f = fl+1; r <= 7 && f <= 7; r++, f++) {
            result |= (1UL << (f + r*8));
            if((block & (1UL << (f + r * 8))) != 0) break;
        }
        for(r = rk+1, f = fl-1; r <= 7 && f >= 0; r++, f--) {
            result |= (1UL << (f + r*8));
            if((block & (1UL << (f + r * 8))) != 0) break;
        }
        for(r = rk-1, f = fl+1; r >= 0 && f <= 7; r--, f++) {
            result |= (1UL << (f + r*8));
            if((block & (1UL << (f + r * 8))) != 0) break;
        }
        for(r = rk-1, f = fl-1; r >= 0 && f >= 0; r--, f--) {
            result |= (1UL << (f + r*8));
            if((block & (1UL << (f + r * 8))) != 0) break;
        }
        return result;
    }

    /// <summary>
    /// Contains Bishop Masks by square, relevant for Magic/PEXT Sliding Move Generation
    /// </summary>
    private static ReadOnlySpan<ulong> BishopMasks_ => [
        0x0040201008040200ul, 0x0000402010080400ul, 0x0000004020100A00ul, 0x0000000040221400ul, 0x0000000002442800ul, 0x0000000204085000ul, 0x0000020408102000ul, 0x0002040810204000ul,       
        0x0020100804020000ul, 0x0040201008040000ul, 0x00004020100A0000ul, 0x0000004022140000ul, 0x0000000244280000ul, 0x0000020408500000ul, 0x0002040810200000ul, 0x0004081020400000ul,       
        0x0010080402000200ul, 0x0020100804000400ul, 0x004020100A000A00ul, 0x0000402214001400ul, 0x0000024428002800ul, 0x0002040850005000ul, 0x0004081020002000ul, 0x0008102040004000ul,       
        0x0008040200020400ul, 0x0010080400040800ul, 0x0020100A000A1000ul, 0x0040221400142200ul, 0x0002442800284400ul, 0x0004085000500800ul, 0x0008102000201000ul, 0x0010204000402000ul,       
        0x0004020002040800ul, 0x0008040004081000ul, 0x00100A000A102000ul, 0x0022140014224000ul, 0x0044280028440200ul, 0x0008500050080400ul, 0x0010200020100800ul, 0x0020400040201000ul,       
        0x0002000204081000ul, 0x0004000408102000ul, 0x000A000A10204000ul, 0x0014001422400000ul, 0x0028002844020000ul, 0x0050005008040200ul, 0x0020002010080400ul, 0x0040004020100800ul,       
        0x0000020408102000ul, 0x0000040810204000ul, 0x00000A1020400000ul, 0x0000142240000000ul, 0x0000284402000000ul, 0x0000500804020000ul, 0x0000201008040200ul, 0x0000402010080400ul,       
        0x0002040810204000ul, 0x0004081020400000ul, 0x000A102040000000ul, 0x0014224000000000ul, 0x0028440200000000ul, 0x0050080402000000ul, 0x0020100804020000ul, 0x0040201008040200ul,
    ];

    /// <summary>
    /// Contains Rook Masks by square, relevant for Magic/PEXT Sliding Move Generation
    /// </summary>
    private static ReadOnlySpan<ulong> RookMasks_ => [
        0x000101010101017Eul, 0x000202020202027Cul, 0x000404040404047Aul, 0x0008080808080876ul, 0x001010101010106Eul, 0x002020202020205Eul, 0x004040404040403Eul, 0x008080808080807Eul,       
        0x0001010101017E00ul, 0x0002020202027C00ul, 0x0004040404047A00ul, 0x0008080808087600ul, 0x0010101010106E00ul, 0x0020202020205E00ul, 0x0040404040403E00ul, 0x0080808080807E00ul,       
        0x00010101017E0100ul, 0x00020202027C0200ul, 0x00040404047A0400ul, 0x0008080808760800ul, 0x00101010106E1000ul, 0x00202020205E2000ul, 0x00404040403E4000ul, 0x00808080807E8000ul,       
        0x000101017E010100ul, 0x000202027C020200ul, 0x000404047A040400ul, 0x0008080876080800ul, 0x001010106E101000ul, 0x002020205E202000ul, 0x004040403E404000ul, 0x008080807E808000ul,       
        0x0001017E01010100ul, 0x0002027C02020200ul, 0x0004047A04040400ul, 0x0008087608080800ul, 0x0010106E10101000ul, 0x0020205E20202000ul, 0x0040403E40404000ul, 0x0080807E80808000ul,       
        0x00017E0101010100ul, 0x00027C0202020200ul, 0x00047A0404040400ul, 0x0008760808080800ul, 0x00106E1010101000ul, 0x00205E2020202000ul, 0x00403E4040404000ul, 0x00807E8080808000ul,       
        0x007E010101010100ul, 0x007C020202020200ul, 0x007A040404040400ul, 0x0076080808080800ul, 0x006E101010101000ul, 0x005E202020202000ul, 0x003E404040404000ul, 0x007E808080808000ul,       
        0x7E01010101010100ul, 0x7C02020202020200ul, 0x7A04040404040400ul, 0x7608080808080800ul, 0x6E10101010101000ul, 0x5E20202020202000ul, 0x3E40404040404000ul, 0x7E80808080808000ul,
    ];

    /// <summary>
    /// Contains Bishop Attacks by square on an empty Board
    /// </summary>
    public static ReadOnlySpan<ulong> BishopAttacksEmpty => [
        0x8040201008040200ul, 0x0080402010080500ul, 0x0000804020110A00ul, 0x0000008041221400ul, 0x0000000182442800ul, 0x0000010204885000ul, 0x000102040810A000ul, 0x0102040810204000ul,       
        0x4020100804020002ul, 0x8040201008050005ul, 0x00804020110A000Aul, 0x0000804122140014ul, 0x0000018244280028ul, 0x0001020488500050ul, 0x0102040810A000A0ul, 0x0204081020400040ul,       
        0x2010080402000204ul, 0x4020100805000508ul, 0x804020110A000A11ul, 0x0080412214001422ul, 0x0001824428002844ul, 0x0102048850005088ul, 0x02040810A000A010ul, 0x0408102040004020ul,       
        0x1008040200020408ul, 0x2010080500050810ul, 0x4020110A000A1120ul, 0x8041221400142241ul, 0x0182442800284482ul, 0x0204885000508804ul, 0x040810A000A01008ul, 0x0810204000402010ul,       
        0x0804020002040810ul, 0x1008050005081020ul, 0x20110A000A112040ul, 0x4122140014224180ul, 0x8244280028448201ul, 0x0488500050880402ul, 0x0810A000A0100804ul, 0x1020400040201008ul,       
        0x0402000204081020ul, 0x0805000508102040ul, 0x110A000A11204080ul, 0x2214001422418000ul, 0x4428002844820100ul, 0x8850005088040201ul, 0x10A000A010080402ul, 0x2040004020100804ul,       
        0x0200020408102040ul, 0x0500050810204080ul, 0x0A000A1120408000ul, 0x1400142241800000ul, 0x2800284482010000ul, 0x5000508804020100ul, 0xA000A01008040201ul, 0x4000402010080402ul,       
        0x0002040810204080ul, 0x0005081020408000ul, 0x000A112040800000ul, 0x0014224180000000ul, 0x0028448201000000ul, 0x0050880402010000ul, 0x00A0100804020100ul, 0x0040201008040201ul,       
    ];

    /// <summary>
    /// Contains Rook Attacks by square on an empty Board
    /// </summary>
    public static ReadOnlySpan<ulong> RookAttacksEmpty => [
        0x01010101010101FEul, 0x02020202020202FDul, 0x04040404040404FBul, 0x08080808080808F7ul, 0x10101010101010EFul, 0x20202020202020DFul, 0x40404040404040BFul, 0x808080808080807Ful,       
        0x010101010101FE01ul, 0x020202020202FD02ul, 0x040404040404FB04ul, 0x080808080808F708ul, 0x101010101010EF10ul, 0x202020202020DF20ul, 0x404040404040BF40ul, 0x8080808080807F80ul,       
        0x0101010101FE0101ul, 0x0202020202FD0202ul, 0x0404040404FB0404ul, 0x0808080808F70808ul, 0x1010101010EF1010ul, 0x2020202020DF2020ul, 0x4040404040BF4040ul, 0x80808080807F8080ul,       
        0x01010101FE010101ul, 0x02020202FD020202ul, 0x04040404FB040404ul, 0x08080808F7080808ul, 0x10101010EF101010ul, 0x20202020DF202020ul, 0x40404040BF404040ul, 0x808080807F808080ul,       
        0x010101FE01010101ul, 0x020202FD02020202ul, 0x040404FB04040404ul, 0x080808F708080808ul, 0x101010EF10101010ul, 0x202020DF20202020ul, 0x404040BF40404040ul, 0x8080807F80808080ul,       
        0x0101FE0101010101ul, 0x0202FD0202020202ul, 0x0404FB0404040404ul, 0x0808F70808080808ul, 0x1010EF1010101010ul, 0x2020DF2020202020ul, 0x4040BF4040404040ul, 0x80807F8080808080ul,       
        0x01FE010101010101ul, 0x02FD020202020202ul, 0x04FB040404040404ul, 0x08F7080808080808ul, 0x10EF101010101010ul, 0x20DF202020202020ul, 0x40BF404040404040ul, 0x807F808080808080ul,       
        0xFE01010101010101ul, 0xFD02020202020202ul, 0xFB04040404040404ul, 0xF708080808080808ul, 0xEF10101010101010ul, 0xDF20202020202020ul, 0xBF40404040404040ul, 0x7F80808080808080ul, 
    ];

    /// <summary>
    /// Conains Bishop Magics by square
    /// </summary>
    private static ReadOnlySpan<ulong> BishopMagicNumbers_ => [
        0x0026421208010105ul, 0x080224180608C000ul, 0x9014410401105002ul, 0x20021246000954A0ul, 0x008C042000160800ul, 0x22220812894A0080ul, 0x110021840A41000Aul, 0x1A11090101202201ul,       
        0x1188200801080084ul, 0x1004100109250205ul, 0x0202882801082800ul, 0x0011040408800001ul, 0x2422622206002082ul, 0x0002009044241004ul, 0x1000040080881808ul, 0x0000003500501040ul,       
        0x881980B042080800ul, 0x1004001001081700ul, 0x0002101004004408ul, 0x0202002020204001ul, 0x22A2000C02114400ul, 0x0000802040504000ul, 0x19288068C4242000ul, 0x6001810200808880ul,       
        0x4004500004101000ul, 0x0104501220492910ul, 0x2474010190004080ul, 0x02B4040000C10200ul, 0x0121840202802000ul, 0x0032008814100808ul, 0x0011031814141102ul, 0x408C02A400821120ul,       
        0x5008029051482084ul, 0x1802882018050402ul, 0x4048140200440804ul, 0x8000100820040400ul, 0x0040024110070100ul, 0x1020010510520800ul, 0x0010010104004460ul, 0x1002120022284400ul,       
        0x010210101440AA00ul, 0x0400C10821010880ul, 0x2406010041006818ul, 0x0001002018022100ul, 0x0C4414102C00A080ul, 0x1040084181002020ul, 0x0402104102000100ul, 0x0208088404803240ul,       
        0x42804200908802C1ul, 0x002B010802021010ul, 0x0AA1812284100500ul, 0x0000008020880021ul, 0x0000001002022868ul, 0x000C281090008204ul, 0x0084101232040248ul, 0x0050040104086000ul,       
        0x1008410088090903ul, 0x00A001A068080800ul, 0x0080308100809000ul, 0x00004000004A8A14ul, 0x4041001810020600ul, 0x0081E04A08301420ul, 0x001018B021081101ul, 0x0202023044010040ul,       
    ];

    /// <summary>
    /// Conains Rook Magics by square
    /// </summary>
    private static ReadOnlySpan<ulong> RookMgicsNumbers_ => [
        0x0080044000211180ul, 0x0C40002003401001ul, 0x0D00200100089040ul, 0x0900100020050008ul, 0x2100110008000204ul, 0x860006004C082150ul, 0x0080020001000880ul, 0x0200020020850044ul,       
        0x0C00800080400020ul, 0x0084400050012000ul, 0x0020802002811000ul, 0x0011001000290220ul, 0x0000808084000800ul, 0x0002001002001C89ul, 0x0781002421003200ul, 0x0088800141000080ul,       
        0x0040008000428220ul, 0x0010004040002008ul, 0x2220010040310060ul, 0x04250100201000CAul, 0x0088010004110018ul, 0x0000808004000200ul, 0x0002040010088102ul, 0x4020020000850044ul,       
        0x0080084040002008ul, 0x00C0A00040005000ul, 0x4010003180600080ul, 0x0102A10100195000ul, 0x2000040080080080ul, 0x0100560080540080ul, 0x0042420400080150ul, 0x0004040200048041ul,       
        0x2000A04010800080ul, 0x80002000C2401000ul, 0x0820008221801000ul, 0x5001081001002101ul, 0x2289801800800400ul, 0x18A2000402001008ul, 0x8080880104002210ul, 0x00640091060003C4ul,       
        0x0402400180028022ul, 0x018A601001414004ul, 0x0010002000808012ul, 0x2408102142020008ul, 0x0020040008008080ul, 0x9007000400430028ul, 0x0060100802040001ul, 0x1001304085020004ul,       
        0x000A010420548200ul, 0x0012006100884200ul, 0x0000208842001200ul, 0x0102002040281200ul, 0x5189000800100500ul, 0x0002001004481200ul, 0x00021221A8100C00ul, 0x0000041885204200ul,       
        0x08A88000110020C1ul, 0x0101001440008323ul, 0x0050110108600041ul, 0x0010892050000501ul, 0x0086002004191002ul, 0x3001001400020801ul, 0x0842010188021004ul, 0x0898004400810AA2ul,
    ];
    
    /// <summary>
    /// Contains Magic Bishop Shifts by square
    /// </summary>
    private static ReadOnlySpan<int> fancyBishopBits_ => [
        6, 5, 5, 6, 6, 6, 6, 7,
        5, 5, 5, 5, 6, 6, 6, 6,
        5, 5, 7, 7, 7, 7, 5, 5,
        5, 5, 7, 9, 9, 7, 5, 5,
        5, 5, 7, 9, 9, 7, 5, 5,
        5, 5, 7, 7, 7, 7, 5, 5,
        6, 5, 5, 5, 5, 5, 5, 5,
        7, 6, 5, 6, 5, 5, 5, 6,
    ];

    /// <summary>
    /// Contains Magic Rook Shifts by square
    /// </summary>
    private static ReadOnlySpan<int> fancyRookBits_ => [ 
        12, 11, 11, 11, 11, 11, 11, 12,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        12, 11, 11, 11, 11, 11, 11, 12,
    ];

    private static unsafe Magic* BishopMagic_;
    private static unsafe Magic* RookMagic_;

    static unsafe Attacks()
    {
        BishopMagic_ = (Magic*)NativeMemory.Alloc((nuint)(sizeof(Magic) * 64));
        RookMagic_ = (Magic*)NativeMemory.Alloc((nuint)(sizeof(Magic) * 64));

        for (int sq=0; sq<64; sq++)
        {
            BishopMagic_[sq] = new Magic(
                BishopMagicNumbers_[sq], BishopMasks_[sq], fancyBishopBits_[sq],
                sq, batt
            );
            RookMagic_[sq] = new Magic(
                RookMgicsNumbers_[sq], RookMasks_[sq], fancyRookBits_[sq],
                sq, ratt
            );
        }
    }

    public unsafe static void Dispose()
    {
        if (BishopMagic_ != null)
        {
            for (int i = 0; i < 64; i++)
            {
                BishopMagic_[i].Dispose();
                RookMagic_[i].Dispose();
            }

            BishopMagic_ = null;
            RookMagic_ = null;
        }
    }
}